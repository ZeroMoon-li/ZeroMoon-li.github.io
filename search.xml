<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>从零开始学习Java</title>
      <link href="/2022/03/19/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AD%A6Java/"/>
      <url>/2022/03/19/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AD%A6Java/</url>
      
        <content type="html"><![CDATA[<p>主要用于记录Java的一些基本知识以及在学习Java过程中所遇到的问题。</p><h2 id="java的类"><a href="#java的类" class="headerlink" title="java的类"></a>java的类</h2><p>类是Java程序的基本要素，一个Java应用程序就是由若干个类所构成的。类是Java语言中最重要的”数据类型”，类声明的变量被称为对象变量，简称对象。<br>   类的定义包括两部分：类声明和类体。基本格式为：</p><blockquote><p>class 类名 {<br>    类体的内容<br>  }</p></blockquote><h3 id="类声明"><a href="#类声明" class="headerlink" title="类声明"></a>类声明</h3><p>“class 类名 “ 被称为类声明。编程风格：如果类名使用拉丁字母时，那么名字的首字母要大写，如Hello、Hi等。当类名有几个单词复合而成时，每个单词的首字母应大写，如HelloWorld。</p><h3 id="类体"><a href="#类体" class="headerlink" title="类体"></a>类体</h3><p>类的目的是抽象出一类事物共有的属性和行为，并用一定的语法格式来描述所抽象出的属性和行为。类声明之后的一对大括号“{” “}”以及它们之间的内容称作类体，大括号之间的内容称作类体的内容。<br>类的内容由如下所述的两部分组成：</p><ul><li>变量的声明：用来储存属性的值（体现对象的属性）。  </li><li>方法的定义：方法可以对类中声明的变量进行操作，即给出算法（体现对象所具有的行为）。  </li></ul><p>下面是一个类名为Rectangle的类（用来描述长方形）。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span>&#123;</span><br><span class="line">  <span class="type">float</span> length; <span class="comment">//长方形的长（变量声明）</span></span><br><span class="line">  <span class="type">float</span> width; <span class="comment">//长方形的宽（变量声明）</span></span><br><span class="line">  <span class="type">float</span> area; <span class="comment">//长方形的面积（变量声明）</span></span><br><span class="line">  <span class="type">float</span> <span class="title function_">computerArea</span><span class="params">()</span>&#123;    <span class="comment">//定义方法computerArea</span></span><br><span class="line">    area = length*width;</span><br><span class="line">    <span class="keyword">return</span> area;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(<span class="type">float</span> L,<span class="type">float</span> W)</span>&#123;    <span class="comment">//定义方法setData</span></span><br><span class="line">    length = L;</span><br><span class="line">    width = W;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><h4 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h4><ul><li>成员变量的类型可以是Java的任何一种数据类型。</li><li>成员变量在整个类内都有效，其有效性与它在类体中书写的先后位置无关，例如，前面的Rectangle类也可以等价地写成（不提倡这种写法）：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span>&#123;</span><br><span class="line">  <span class="type">float</span> length; <span class="comment">//长方形的长（变量声明）</span></span><br><span class="line">  <span class="type">float</span> width; <span class="comment">//长方形的宽（变量声明）</span></span><br><span class="line">  <span class="type">float</span> <span class="title function_">computerArea</span><span class="params">()</span>&#123;    <span class="comment">//定义方法computerArea</span></span><br><span class="line">    area = length*width;</span><br><span class="line">    <span class="keyword">return</span> area;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(<span class="type">float</span> L,<span class="type">float</span> W)</span>&#123;    <span class="comment">//定义方法setData</span></span><br><span class="line">    length = L;</span><br><span class="line">    width = W;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">float</span> area; <span class="comment">//长方形的面积（变量声明）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>方法的定义有包括两部分：方法头和方法体，一般格式为：</p><blockquote><p>方法头 {<br>      方法体的内容<br>  }  </p></blockquote><h5 id="方法头"><a href="#方法头" class="headerlink" title="方法头"></a>方法头</h5><p>方法头由方法的类型、名称和名称之后的一对小括号以及其中的参数列表所构成。可根据程序的需要，方法返回的数据类型可以是Java的任何一种数据类型，当一个方法是void类型时，该方法就不需要返回数据。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> <span class="title function_">computerArea</span><span class="params">()</span> <span class="comment">//无参数的方法头</span></span><br><span class="line">&#123;    </span><br><span class="line">  area = length*width;</span><br><span class="line">  <span class="keyword">return</span> area;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(<span class="type">float</span> L,<span class="type">float</span> W)</span>  <span class="comment">//有参数的方法头</span></span><br><span class="line">&#123;</span><br><span class="line">  length = L;</span><br><span class="line">  width = W;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="方法体"><a href="#方法体" class="headerlink" title="方法体"></a>方法体</h5><p>方法声明之后的一对大括号{、}以及它们之间的内容被称为方法的方法体。方法体的内容包括局部变量的声明和Java语句，即在方法体内可以对成员变量和方法体中声明的局部变量进行操作。在方法体中声明的变量和方法的参数被称作局部变量，例如(求n!的方法):</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">getFactorial</span><span class="params">(<span class="type">int</span> n)</span>&#123;  <span class="comment">//参数n是局部变量</span></span><br><span class="line">  <span class="type">int</span> <span class="variable">factorial</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">//声明局部变量factorial</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    factorial = factorial*i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> factorial;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h6><ul><li>和类的成员变量不同的是，局部变量只在方法内有效，而且与其声明的位置有关。方法的参数在整个方法内有效，方法内的局部变量从声明它的位置之后开始有效。如果局部变量的声明是在一个复合语句中，那么该局部变量的有效范围是该复合语句；如果局部变量的声明是在一个循环语句中，那么该局部变量的有效范围是该循环语句。例如：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">  <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">4</span>,factorial = <span class="number">1</span>; <span class="comment">//成员变量，在整个类有效</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">f</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&gt;<span class="number">3</span>) &#123;</span><br><span class="line">      <span class="type">int</span> <span class="variable">z</span> <span class="operator">=</span> <span class="number">2</span>; <span class="comment">//z仅仅在该复合语句中有效</span></span><br><span class="line">      z = z*n+z;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">      factorial = factorial*i;<span class="comment">//i仅仅在该循环语句中有效</span></span><br><span class="line">    &#125;</span><br><span class="line">    n = factorial; <span class="comment">//合法，因为n和factorial有效</span></span><br><span class="line">    z = i+factorial; <span class="comment">//非法，因为i和z已失效</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>如果局部变量的名字与成员变量的名字相同，那么成员变量被隐藏，即该成员变量在这个方法暂时失效。如果想在该方法中使用被隐藏的成员变量，必须使用关键句this。例如：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">  <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>,y,z;</span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">f</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">    y = x+x; <span class="comment">//y得到的值是10，而不是20。</span></span><br><span class="line">    z=x+<span class="built_in">this</span>.x; <span class="comment">//z得到的值是15。</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>成员变量有默认值，但局部变量没有默认值，因此在使用局部变量之前，必须保证局部变量有具体的值，否则可能无法通过编译。例如：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">  <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span> ,y;</span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">f</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> m;     <span class="comment">//m没有默认值，但编译无错误</span></span><br><span class="line">    x = y+m;   <span class="comment">//无法通过编译，因为使用m之前未指定m的值</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="需要注意的问题"><a href="#需要注意的问题" class="headerlink" title="需要注意的问题"></a>需要注意的问题</h3>在类体中，对成员变量的操作只能放在方法中，方法使用各种语句对成员变量和方法体中声明的局部变量进行操作。声明成员变量时可赋予初值，例如：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">  <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">  <span class="type">float</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">1.32f</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>但不可以这样做：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">  <span class="type">int</span> a;</span><br><span class="line">  <span class="type">float</span> b;</span><br><span class="line">  a = <span class="number">3</span>;        <span class="comment">//非法，这是赋值语句（语句不是声明语句，只能出现在方法体中）   </span></span><br><span class="line">  b = <span class="number">1.32f</span>;   <span class="comment">//非法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java零基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
